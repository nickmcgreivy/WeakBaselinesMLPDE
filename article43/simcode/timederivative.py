import jax.numpy as np
from jax.lax import scan
import jax
from jax import vmap

from flux import Flux
from polynomial_recovery import recovery_slope
from helper import _fixed_quad, inner_prod_with_legendre

########################################################
# BURGERS
########################################################


def pad_dirichlet(a, t, fL, fR):
    p = a.shape[1]
    negonetokplusone = (np.ones(p) * -1) ** (np.arange(p) + 1)
    uL = fL(t)
    uR = fR(t)
    aL = negonetokplusone * a[0]
    aL = aL.at[0].set(2 * uL + aL[0])
    aR = negonetokplusone * a[-1]
    aR = aR.at[0].set(2 * uR + aR[0])
    return np.concatenate((aL[None,:], a, aR[None,:]), axis=0)


def _centered_flux_DG_1D_burgers(a, p):
    """
    Computes the centered flux F(f_{j+1/2}) where
    + is the right side.
    F(f_{j+1/2}) = (f_{j+1/2}^- + f_{j+1/2}^+) / 2
    where + = outside and - = inside.

    Inputs
    a: (nx, p) array

    Outputs
    F: (nx) array equal to f averaged.
    """
    a = np.pad(a, ((0, 1), (0, 0)), "wrap")
    alt = (np.ones(p) * -1) ** np.arange(p)
    u_left = np.sum(a[:-1], axis=-1)
    u_right = np.sum(alt[None, :] * a[1:], axis=-1)
    return ((u_left + u_right) / 2) ** 2 / 2
    # return ((u_left**2 + u_right**2) / 2) # THIS ONE IS BAD ON BURGERS


def _godunov_flux_DG_1D_burgers(u_left, u_right, p):
    """
    Computes the Godunov flux F(f_{j+1/2}) where
    + is the right side.

    Inputs
    a: (nx, p) array

    Outputs
    F: (nx) array equal to the godunov flux
    """
    zero_out = 0.5 * np.abs(np.sign(u_left) + np.sign(u_right))
    compare = np.less(u_left, u_right)
    F = lambda u: u ** 2 / 2
    return compare * zero_out * np.minimum(F(u_left), F(u_right)) + (
        1 - compare
    ) * np.maximum(F(u_left), F(u_right))


def _flux_term_DG_1D_burgers(a, t, p, flux, bc='periodic',fL=None,fR=None):
    negonetok = (np.ones(p) * -1) ** np.arange(p)
    if bc == 'periodic':
        if flux == Flux.GODUNOV:
            u_left = np.sum(a, axis=-1)
            u_right = np.sum(negonetok[None, :] * np.roll(a, -1, axis=0), axis=-1)
            flux_right = _godunov_flux_DG_1D_burgers(u_left, u_right, p)
        else:
            raise NotImplementedError

        flux_left = np.roll(flux_right, 1, axis=0)
    elif bc == 'dirichlet':
        if flux == Flux.GODUNOV:
            a = pad_dirichlet(a, t, fL, fR)
            u_left = np.sum(a[:-1], axis=-1)
            u_right = np.sum(negonetok[None, :] * a[1:],axis=-1)
            flux = _godunov_flux_DG_1D_burgers(u_left, u_right, p)
        else:
            raise NotImplementedError
        flux_right = flux[1:]
        flux_left = flux[:-1]
    else:
        raise NotImplementedError

    return negonetok[None, :] * flux_left[:, None] - flux_right[:, None]


def _volume_integral_DG_1D_burgers(a, t, p):
    if p == 1:
        volume_sum = np.zeros(a.shape)
        return volume_sum
    elif p == 2:
        volume_sum = np.zeros(a.shape).at[:, 1].add(a[:, 0] * a[:, 0] + 0.3333333333333333 * a[:, 1] * a[:, 1])
        return volume_sum
    elif p == 3:
        volume_sum = np.zeros(a.shape).at[:, 1].add(a[:, 0] * a[:, 0] + 0.3333333333333333 * a[:, 1] * a[:, 1] + 0.2 * a[:, 2] * a[:, 2])
        volume_sum = volume_sum.at[:, 2].add(
             a[:, 0] * a[:, 1]
            +  a[:, 1] * a[:, 0]
            + 0.4 * a[:, 1] * a[:, 2]
            + 0.4 * a[:, 2] * a[:, 1],
        )
        return volume_sum
    elif p == 4:
        volume_sum = np.zeros(a.shape).at[:, 1].add(a[:, 0] * a[:, 0]
            + 0.3333333333333333 * a[:, 1] * a[:, 1]
            + 0.2 * a[:, 2] * a[:, 2]
            + 0.14285714285714285 * a[:, 3] * a[:, 3],
        )   
        volume_sum = volume_sum.at[:, 2].add(
             a[:, 0] * a[:, 1]
            +  a[:, 1] * a[:, 0]
            + 0.4 * a[:, 1] * a[:, 2]
            + 0.4 * a[:, 2] * a[:, 1]
            + 0.2571428571428571 * a[:, 2] * a[:, 3]
            + 0.2571428571428571 * a[:, 3] * a[:, 2],
        )
        volume_sum = volume_sum.at[:, 3].add(
             a[:, 0] * a[:, 0]
            +  a[:, 0] * a[:, 2]
            +  a[:, 1] * a[:, 1]
            + 0.42857142857142855 * a[:, 1] * a[:, 3]
            +  a[:, 2] * a[:, 0]
            + 0.4857142857142857 * a[:, 2] * a[:, 2]
            + 0.42857142857142855 * a[:, 3] * a[:, 1]
            + 0.3333333333333333 * a[:, 3] * a[:, 3],
        )
        return volume_sum
    elif p == 5:
        volume_sum = np.zeros(a.shape)
        volume_sum = volume_sum.at[:, 1].add(a[:, 0] * a[:, 0] + 0.3333333333333333 * a[:, 1] * a[:, 1] + 0.2 * a[:, 2] * a[:, 2] + 0.14285714285714285 * a[:, 3] * a[:, 3] + 0.1111111111111111 * a[:, 4] * a[:, 4])
        volume_sum = volume_sum.at[:, 2].add(a[:, 0] * a[:, 1] + a[:, 1] * a[:, 0] + 0.4 * a[:, 1] * a[:, 2] + 0.4 * a[:, 2] * a[:, 1] + 0.2571428571428571 * a[:, 2] * a[:, 3] + 0.2571428571428571 * a[:, 3] * a[:, 2] + 0.19047619047619047 * a[:, 3] * a[:, 4] + 0.19047619047619047 * a[:, 4] * a[:, 3])
        volume_sum = volume_sum.at[:, 3].add(a[:, 0] * a[:, 0] + a[:, 0] * a[:, 2] + a[:, 1] * a[:, 1] + 0.42857142857142855 * a[:, 1] * a[:, 3] + a[:, 2] * a[:, 0] + 0.4857142857142857 * a[:, 2] * a[:, 2] + 0.2857142857142857 * a[:, 2] * a[:, 4] + 0.42857142857142855 * a[:, 3] * a[:, 1] + 0.3333333333333333 * a[:, 3] * a[:, 3] + 0.2857142857142857 * a[:, 4] * a[:, 2] + 0.2554112554112554 * a[:, 4] * a[:, 4])
        volume_sum = volume_sum.at[:, 4].add(a[:, 0] * a[:, 1] + a[:, 0] * a[:, 3] + a[:, 1] * a[:, 0] + a[:, 1] * a[:, 2] + 0.4444444444444444 * a[:, 1] * a[:, 4] + a[:, 2] * a[:, 1] + 0.5238095238095238 * a[:, 2] * a[:, 3] + a[:, 3] * a[:, 0] + 0.5238095238095238 * a[:, 3] * a[:, 2] + 0.3722943722943723 * a[:, 3] * a[:, 4] + 0.4444444444444444 * a[:, 4] * a[:, 1] + 0.3722943722943723 * a[:, 4] * a[:, 3])
        return volume_sum
    elif p == 6:
        volume_sum = np.zeros(a.shape)
        volume_sum = volume_sum.at[:, 1].add(a[:, 0] * a[:, 0] + 0.3333333333333333 * a[:, 1] * a[:, 1] + 0.2 * a[:, 2] * a[:, 2] + 0.14285714285714285 * a[:, 3] * a[:, 3] + 0.1111111111111111 * a[:, 4] * a[:, 4] + 0.09090909090909091 * a[:, 5] * a[:, 5])
        volume_sum = volume_sum.at[:, 2].add(a[:, 0] * a[:, 1] + a[:, 1] * a[:, 0] + 0.4 * a[:, 1] * a[:, 2] + 0.4 * a[:, 2] * a[:, 1] + 0.2571428571428571 * a[:, 2] * a[:, 3] + 0.2571428571428571 * a[:, 3] * a[:, 2] + 0.19047619047619047 * a[:, 3] * a[:, 4] + 0.19047619047619047 * a[:, 4] * a[:, 3] + 0.15151515151515152 * a[:, 4] * a[:, 5] + 0.15151515151515152 * a[:, 5] * a[:, 4])
        volume_sum = volume_sum.at[:, 3].add(a[:, 0] * a[:, 0] + a[:, 0] * a[:, 2] + a[:, 1] * a[:, 1] + 0.42857142857142855 * a[:, 1] * a[:, 3] +  a[:, 2] * a[:, 0] + 0.4857142857142857 * a[:, 2] * a[:, 2] + 0.2857142857142857 * a[:, 2] * a[:, 4] + 0.42857142857142855 * a[:, 3] * a[:, 1] + 0.3333333333333333 * a[:, 3] * a[:, 3] + 0.21645021645021645 * a[:, 3] * a[:, 5] + 0.2857142857142857 * a[:, 4] * a[:, 2] + 0.2554112554112554 * a[:, 4] * a[:, 4] + 0.21645021645021645 * a[:, 5] * a[:, 3] + 0.20745920745920746 * a[:, 5] * a[:, 5])
        volume_sum = volume_sum.at[:, 4].add(a[:, 0] * a[:, 1] + a[:, 0] * a[:, 3] + a[:, 1] * a[:, 0] + a[:, 1] * a[:, 2] + 0.4444444444444444 * a[:, 1] * a[:, 4] +  a[:, 2] * a[:, 1] + 0.5238095238095238 * a[:, 2] * a[:, 3] + 0.30303030303030304 * a[:, 2] * a[:, 5] +  a[:, 3] * a[:, 0] + 0.5238095238095238 * a[:, 3] * a[:, 2] + 0.3722943722943723 * a[:, 3] * a[:, 4] + 0.4444444444444444 * a[:, 4] * a[:, 1] + 0.3722943722943723 * a[:, 4] * a[:, 3] + 0.2913752913752914 * a[:, 4] * a[:, 5] + 0.30303030303030304 * a[:, 5] * a[:, 2] + 0.2913752913752914 * a[:, 5] * a[:, 4])
        volume_sum = volume_sum.at[:, 5].add(a[:, 0] * a[:, 0] + a[:, 0] * a[:, 2] + a[:, 0] * a[:, 4] + a[:, 1] * a[:, 1] +  a[:, 1] * a[:, 3] + 0.45454545454545453 * a[:, 1] * a[:, 5] + a[:, 2] * a[:, 0] + a[:, 2] * a[:, 2] + 0.5454545454545454 * a[:, 2] * a[:, 4] + a[:, 3] * a[:, 1] + 0.5670995670995671 * a[:, 3] * a[:, 3] + 0.3962703962703963 * a[:, 3] * a[:, 5] +  a[:, 4] * a[:, 0] + 0.5454545454545454 * a[:, 4] * a[:, 2] + 0.4172494172494173 * a[:, 4] * a[:, 4] + 0.45454545454545453 * a[:, 5] * a[:, 1] + 0.3962703962703963 * a[:, 5] * a[:, 3] + 0.3333333333333333 * a[:, 5] * a[:, 5])
        return volume_sum
    elif p == 7:
        volume_sum = np.zeros(a.shape)
        volume_sum = volume_sum.at[:, 1].add(a[:, 0] * a[:, 0] + 0.3333333333333333 * a[:, 1] * a[:, 1] + 0.2 * a[:, 2] * a[:, 2] + 0.14285714285714285 * a[:, 3] * a[:, 3] + 0.1111111111111111 * a[:, 4] * a[:, 4] + 0.09090909090909091 * a[:, 5] * a[:, 5] + 0.07692307692307693 * a[:, 6] * a[:, 6])
        volume_sum = volume_sum.at[:, 2].add(a[:, 0] * a[:, 1] + a[:, 1] * a[:, 0] + 0.4 * a[:, 1] * a[:, 2] + 0.4 * a[:, 2] * a[:, 1] + 0.2571428571428571 * a[:, 2] * a[:, 3] + 0.2571428571428571 * a[:, 3] * a[:, 2] + 0.19047619047619047 * a[:, 3] * a[:, 4] + 0.19047619047619047 * a[:, 4] * a[:, 3] + 0.15151515151515152 * a[:, 4] * a[:, 5] + 0.15151515151515152 * a[:, 5] * a[:, 4] + 0.1258741258741259 * a[:, 5] * a[:, 6] + 0.1258741258741259 * a[:, 6] * a[:, 5])
        volume_sum = volume_sum.at[:, 3].add(a[:, 0] * a[:, 0] + a[:, 0] * a[:, 2] + a[:, 1] * a[:, 1] + 0.42857142857142855 * a[:, 1] * a[:, 3] + a[:, 2] * a[:, 0] + 0.4857142857142857 * a[:, 2] * a[:, 2] + 0.2857142857142857 * a[:, 2] * a[:, 4] + 0.42857142857142855 * a[:, 3] * a[:, 1] + 0.3333333333333333 * a[:, 3] * a[:, 3] + 0.21645021645021645 * a[:, 3] * a[:, 5] + 0.2857142857142857 * a[:, 4] * a[:, 2] + 0.2554112554112554 * a[:, 4] * a[:, 4] + 0.17482517482517482 * a[:, 4] * a[:, 6] + 0.21645021645021645 * a[:, 5] * a[:, 3] + 0.20745920745920746 * a[:, 5] * a[:, 5] + 0.17482517482517482 * a[:, 6] * a[:, 4] + 0.17482517482517482 * a[:, 6] * a[:, 6])
        volume_sum = volume_sum.at[:, 4].add(a[:, 0] * a[:, 1] + a[:, 0] * a[:, 3] + a[:, 1] * a[:, 0] + a[:, 1] * a[:, 2] + 0.4444444444444444 * a[:, 1] * a[:, 4] + a[:, 2] * a[:, 1] + 0.5238095238095238 * a[:, 2] * a[:, 3] + 0.30303030303030304 * a[:, 2] * a[:, 5] + a[:, 3] * a[:, 0] + 0.5238095238095238 * a[:, 3] * a[:, 2] + 0.3722943722943723 * a[:, 3] * a[:, 4] + 0.2331002331002331 * a[:, 3] * a[:, 6] + 0.4444444444444444 * a[:, 4] * a[:, 1] + 0.3722943722943723 * a[:, 4] * a[:, 3] + 0.2913752913752914 * a[:, 4] * a[:, 5] + 0.30303030303030304 * a[:, 5] * a[:, 2] + 0.2913752913752914 * a[:, 5] * a[:, 4] + 0.2400932400932401 * a[:, 5] * a[:, 6] + 0.2331002331002331 * a[:, 6] * a[:, 3] + 0.2400932400932401 * a[:, 6] * a[:, 5])
        volume_sum = volume_sum.at[:, 5].add(a[:, 0] * a[:, 0] + a[:, 0] * a[:, 2] + a[:, 0] * a[:, 4] + a[:, 1] * a[:, 1] + a[:, 1] * a[:, 3] + 0.45454545454545453 * a[:, 1] * a[:, 5] + a[:, 2] * a[:, 0] + a[:, 2] * a[:, 2] + 0.5454545454545454 * a[:, 2] * a[:, 4] + 0.3146853146853147 * a[:, 2] * a[:, 6] + a[:, 3] * a[:, 1] + 0.5670995670995671 * a[:, 3] * a[:, 3] + 0.3962703962703963 * a[:, 3] * a[:, 5] + a[:, 4] * a[:, 0] + 0.5454545454545454 * a[:, 4] * a[:, 2] + 0.4172494172494173 * a[:, 4] * a[:, 4] + 0.3146853146853147 * a[:, 4] * a[:, 6] + 0.45454545454545453 * a[:, 5] * a[:, 1] + 0.3962703962703963 * a[:, 5] * a[:, 3] + 0.3333333333333333 * a[:, 5] * a[:, 5] + 0.3146853146853147 * a[:, 6] * a[:, 2] + 0.3146853146853147 * a[:, 6] * a[:, 4] + 0.27848621966269027 * a[:, 6] * a[:, 6])
        volume_sum = volume_sum.at[:, 6].add(a[:, 0] * a[:, 1] + a[:, 0] * a[:, 3] + a[:, 0] * a[:, 5] + a[:, 1] * a[:, 0] + a[:, 1] * a[:, 2] + a[:, 1] * a[:, 4] + 0.46153846153846156 * a[:, 1] * a[:, 6] + a[:, 2] * a[:, 1] + a[:, 2] * a[:, 3] + 0.5594405594405595 * a[:, 2] * a[:, 5] + a[:, 3] * a[:, 0] + a[:, 3] * a[:, 2] + 0.5920745920745921 * a[:, 3] * a[:, 4] + 0.4125874125874126 * a[:, 3] * a[:, 6] + a[:, 4] * a[:, 1] + 0.5920745920745921 * a[:, 4] * a[:, 3] + 0.44522144522144524 * a[:, 4] * a[:, 5] + a[:, 5] * a[:, 0] + 0.5594405594405595 * a[:, 5] * a[:, 2] + 0.44522144522144524 * a[:, 5] * a[:, 4] + 0.36075689016865486 * a[:, 5] * a[:, 6] + 0.46153846153846156 * a[:, 6] * a[:, 1] + 0.4125874125874126 * a[:, 6] * a[:, 3] + 0.36075689016865486 * a[:, 6] * a[:, 5])
        return volume_sum
    elif p == 8:
        volume_sum = np.zeros(a.shape)
        volume_sum = volume_sum.at[:, 1].add(a[:, 0] * a[:, 0] + 0.3333333333333333 * a[:, 1] * a[:, 1] + 0.2 * a[:, 2] * a[:, 2] + 0.14285714285714285 * a[:, 3] * a[:, 3] + 0.1111111111111111 * a[:, 4] * a[:, 4] + 0.09090909090909091 * a[:, 5] * a[:, 5] + 0.07692307692307693 * a[:, 6] * a[:, 6] + 0.06666666666666667 * a[:, 7] * a[:, 7])
        volume_sum = volume_sum.at[:, 2].add(a[:, 0] * a[:, 1] + a[:, 1] * a[:, 0] + 0.4 * a[:, 1] * a[:, 2] + 0.4 * a[:, 2] * a[:, 1] + 0.2571428571428571 * a[:, 2] * a[:, 3] + 0.2571428571428571 * a[:, 3] * a[:, 2] + 0.19047619047619047 * a[:, 3] * a[:, 4] + 0.19047619047619047 * a[:, 4] * a[:, 3] + 0.15151515151515152 * a[:, 4] * a[:, 5] + 0.15151515151515152 * a[:, 5] * a[:, 4] + 0.1258741258741259 * a[:, 5] * a[:, 6] + 0.1258741258741259 * a[:, 6] * a[:, 5] + 0.1076923076923077 * a[:, 6] * a[:, 7] + 0.1076923076923077 * a[:, 7] * a[:, 6])
        volume_sum = volume_sum.at[:, 3].add(a[:, 0] * a[:, 0] + a[:, 0] * a[:, 2] + a[:, 1] * a[:, 1] + 0.42857142857142855 * a[:, 1] * a[:, 3] + a[:, 2] * a[:, 0] + 0.4857142857142857 * a[:, 2] * a[:, 2] + 0.2857142857142857 * a[:, 2] * a[:, 4] + 0.42857142857142855 * a[:, 3] * a[:, 1] + 0.3333333333333333 * a[:, 3] * a[:, 3] + 0.21645021645021645 * a[:, 3] * a[:, 5] + 0.2857142857142857 * a[:, 4] * a[:, 2] + 0.2554112554112554 * a[:, 4] * a[:, 4] + 0.17482517482517482 * a[:, 4] * a[:, 6] + 0.21645021645021645 * a[:, 5] * a[:, 3] + 0.20745920745920746 * a[:, 5] * a[:, 5] + 0.14685314685314685 * a[:, 5] * a[:, 7] + 0.17482517482517482 * a[:, 6] * a[:, 4] + 0.17482517482517482 * a[:, 6] * a[:, 6] + 0.14685314685314685 * a[:, 7] * a[:, 5] + 0.151131221719457 * a[:, 7] * a[:, 7])
        volume_sum = volume_sum.at[:, 4].add(a[:, 0] * a[:, 1] + a[:, 0] * a[:, 3] + a[:, 1] * a[:, 0] + a[:, 1] * a[:, 2] + 0.4444444444444444 * a[:, 1] * a[:, 4] + a[:, 2] * a[:, 1] + 0.5238095238095238 * a[:, 2] * a[:, 3] + 0.30303030303030304 * a[:, 2] * a[:, 5] + a[:, 3] * a[:, 0] + 0.5238095238095238 * a[:, 3] * a[:, 2] + 0.3722943722943723 * a[:, 3] * a[:, 4] + 0.2331002331002331 * a[:, 3] * a[:, 6] + 0.4444444444444444 * a[:, 4] * a[:, 1] + 0.3722943722943723 * a[:, 4] * a[:, 3] + 0.2913752913752914 * a[:, 4] * a[:, 5] + 0.19036519036519037 * a[:, 4] * a[:, 7] + 0.30303030303030304 * a[:, 5] * a[:, 2] + 0.2913752913752914 * a[:, 5] * a[:, 4] + 0.2400932400932401 * a[:, 5] * a[:, 6] + 0.2331002331002331 * a[:, 6] * a[:, 3] + 0.2400932400932401 * a[:, 6] * a[:, 5] + 0.2044426162073221 * a[:, 6] * a[:, 7] + 0.19036519036519037 * a[:, 7] * a[:, 4] + 0.2044426162073221 * a[:, 7] * a[:, 6])
        volume_sum = volume_sum.at[:, 5].add(a[:, 0] * a[:, 0] + a[:, 0] * a[:, 2] + a[:, 0] * a[:, 4] + a[:, 1] * a[:, 1] + a[:, 1] * a[:, 3] + 0.45454545454545453 * a[:, 1] * a[:, 5] + a[:, 2] * a[:, 0] + a[:, 2] * a[:, 2] + 0.5454545454545454 * a[:, 2] * a[:, 4] + 0.3146853146853147 * a[:, 2] * a[:, 6] + a[:, 3] * a[:, 1] + 0.5670995670995671 * a[:, 3] * a[:, 3] + 0.3962703962703963 * a[:, 3] * a[:, 5] + 0.24475524475524477 * a[:, 3] * a[:, 7] + a[:, 4] * a[:, 0] + 0.5454545454545454 * a[:, 4] * a[:, 2] + 0.4172494172494173 * a[:, 4] * a[:, 4] + 0.3146853146853147 * a[:, 4] * a[:, 6] + 0.45454545454545453 * a[:, 5] * a[:, 1] + 0.3962703962703963 * a[:, 5] * a[:, 3] + 0.3333333333333333 * a[:, 5] * a[:, 5] + 0.2620320855614973 * a[:, 5] * a[:, 7] + 0.3146853146853147 * a[:, 6] * a[:, 2] + 0.3146853146853147 * a[:, 6] * a[:, 4] + 0.27848621966269027 * a[:, 6] * a[:, 6] + 0.24475524475524477 * a[:, 7] * a[:, 3] + 0.2620320855614973 * a[:, 7] * a[:, 5] + 0.23951590205460174 * a[:, 7] * a[:, 7])
        volume_sum = volume_sum.at[:, 6].add(a[:, 0] * a[:, 1] + a[:, 0] * a[:, 3] + a[:, 0] * a[:, 5] + a[:, 1] * a[:, 0] + a[:, 1] * a[:, 2] + a[:, 1] * a[:, 4] + 0.46153846153846156 * a[:, 1] * a[:, 6] + a[:, 2] * a[:, 1] + a[:, 2] * a[:, 3] + 0.5594405594405595 * a[:, 2] * a[:, 5] + 0.3230769230769231 * a[:, 2] * a[:, 7] + a[:, 3] * a[:, 0] + a[:, 3] * a[:, 2] + 0.5920745920745921 * a[:, 3] * a[:, 4] + 0.4125874125874126 * a[:, 3] * a[:, 6] + a[:, 4] * a[:, 1] + 0.5920745920745921 * a[:, 4] * a[:, 3] + 0.44522144522144524 * a[:, 4] * a[:, 5] + 0.3311394487865076 * a[:, 4] * a[:, 7] + a[:, 5] * a[:, 0] + 0.5594405594405595 * a[:, 5] * a[:, 2] + 0.44522144522144524 * a[:, 5] * a[:, 4] + 0.36075689016865486 * a[:, 5] * a[:, 6] + 0.46153846153846156 * a[:, 6] * a[:, 1] + 0.4125874125874126 * a[:, 6] * a[:, 3] + 0.36075689016865486 * a[:, 6] * a[:, 5] + 0.30446643140141594 * a[:, 6] * a[:, 7] + 0.3230769230769231 * a[:, 7] * a[:, 2] + 0.3311394487865076 * a[:, 7] * a[:, 4] + 0.30446643140141594 * a[:, 7] * a[:, 6])
        volume_sum = volume_sum.at[:, 7].add(a[:, 0] * a[:, 0] + a[:, 0] * a[:, 2] + a[:, 0] * a[:, 4] + a[:, 0] * a[:, 6] + a[:, 1] * a[:, 1] + a[:, 1] * a[:, 3] + a[:, 1] * a[:, 5] + 0.4666666666666667 * a[:, 1] * a[:, 7] + a[:, 2] * a[:, 0] + a[:, 2] * a[:, 2] + a[:, 2] * a[:, 4] + 0.5692307692307692 * a[:, 2] * a[:, 6] + a[:, 3] * a[:, 1] + a[:, 3] * a[:, 3] + 0.6083916083916084 * a[:, 3] * a[:, 5] + 0.4244343891402715 * a[:, 3] * a[:, 7] + a[:, 4] * a[:, 0] + a[:, 4] * a[:, 2] + 0.6192696192696193 * a[:, 4] * a[:, 4] + 0.4644179350061703 * a[:, 4] * a[:, 6] + a[:, 5] * a[:, 1] + 0.6083916083916084 * a[:, 5] * a[:, 3] + 0.47593582887700536 * a[:, 5] * a[:, 5] + 0.38024204897269914 * a[:, 5] * a[:, 7] + a[:, 6] * a[:, 0] + 0.5692307692307692 * a[:, 6] * a[:, 2] + 0.4644179350061703 * a[:, 6] * a[:, 4] + 0.3910671371971682 * a[:, 6] * a[:, 6] + 0.4666666666666667 * a[:, 7] * a[:, 1] + 0.4244343891402715 * a[:, 7] * a[:, 3] + 0.38024204897269914 * a[:, 7] * a[:, 5] + 0.3333333333333333 * a[:, 7] * a[:, 7])
        return volume_sum
    elif p == 9:
        volume_sum = np.zeros(a.shape)
        volume_sum = volume_sum.at[:, 1].add(a[:, 0] * a[:, 0] + 0.3333333333333333 * a[:, 1] * a[:, 1] + 0.2 * a[:, 2] * a[:, 2] + 0.14285714285714285 * a[:, 3] * a[:, 3] + 0.1111111111111111 * a[:, 4] * a[:, 4] + 0.09090909090909091 * a[:, 5] * a[:, 5] + 0.07692307692307693 * a[:, 6] * a[:, 6] + 0.06666666666666667 * a[:, 7] * a[:, 7] + 0.058823529411764705 * a[:, 8] * a[:, 8])
        volume_sum = volume_sum.at[:, 2].add(a[:, 0] * a[:, 1] + a[:, 1] * a[:, 0] + 0.4 * a[:, 1] * a[:, 2] + 0.4 * a[:, 2] * a[:, 1] + 0.2571428571428571 * a[:, 2] * a[:, 3] + 0.2571428571428571 * a[:, 3] * a[:, 2] + 0.19047619047619047 * a[:, 3] * a[:, 4] + 0.19047619047619047 * a[:, 4] * a[:, 3] + 0.15151515151515152 * a[:, 4] * a[:, 5] + 0.15151515151515152 * a[:, 5] * a[:, 4] + 0.1258741258741259 * a[:, 5] * a[:, 6] + 0.1258741258741259 * a[:, 6] * a[:, 5] + 0.1076923076923077 * a[:, 6] * a[:, 7] + 0.1076923076923077 * a[:, 7] * a[:, 6] + 0.09411764705882353 * a[:, 7] * a[:, 8] + 0.09411764705882353 * a[:, 8] * a[:, 7])
        volume_sum = volume_sum.at[:, 3].add(a[:, 0] * a[:, 0] + a[:, 0] * a[:, 2] + a[:, 1] * a[:, 1] + 0.42857142857142855 * a[:, 1] * a[:, 3] + a[:, 2] * a[:, 0] + 0.4857142857142857 * a[:, 2] * a[:, 2] + 0.2857142857142857 * a[:, 2] * a[:, 4] + 0.42857142857142855 * a[:, 3] * a[:, 1] + 0.3333333333333333 * a[:, 3] * a[:, 3] + 0.21645021645021645 * a[:, 3] * a[:, 5] + 0.2857142857142857 * a[:, 4] * a[:, 2] + 0.2554112554112554 * a[:, 4] * a[:, 4] + 0.17482517482517482 * a[:, 4] * a[:, 6] + 0.21645021645021645 * a[:, 5] * a[:, 3] + 0.20745920745920746 * a[:, 5] * a[:, 5] + 0.14685314685314685 * a[:, 5] * a[:, 7] + 0.17482517482517482 * a[:, 6] * a[:, 4] + 0.17482517482517482 * a[:, 6] * a[:, 6] + 0.12669683257918551 * a[:, 6] * a[:, 8] + 0.14685314685314685 * a[:, 7] * a[:, 5] + 0.151131221719457 * a[:, 7] * a[:, 7] + 0.12669683257918551 * a[:, 8] * a[:, 6] + 0.13312693498452013 * a[:, 8] * a[:, 8])
        volume_sum = volume_sum.at[:, 4].add(a[:, 0] * a[:, 1] + a[:, 0] * a[:, 3] + a[:, 1] * a[:, 0] + a[:, 1] * a[:, 2] + 0.4444444444444444 * a[:, 1] * a[:, 4] + a[:, 2] * a[:, 1] + 0.5238095238095238 * a[:, 2] * a[:, 3] + 0.30303030303030304 * a[:, 2] * a[:, 5] + a[:, 3] * a[:, 0] + 0.5238095238095238 * a[:, 3] * a[:, 2] + 0.3722943722943723 * a[:, 3] * a[:, 4] + 0.2331002331002331 * a[:, 3] * a[:, 6] + 0.4444444444444444 * a[:, 4] * a[:, 1] + 0.3722943722943723 * a[:, 4] * a[:, 3] + 0.2913752913752914 * a[:, 4] * a[:, 5] + 0.19036519036519037 * a[:, 4] * a[:, 7] + 0.30303030303030304 * a[:, 5] * a[:, 2] + 0.2913752913752914 * a[:, 5] * a[:, 4] + 0.2400932400932401 * a[:, 5] * a[:, 6] + 0.16125051419169067 * a[:, 5] * a[:, 8] + 0.2331002331002331 * a[:, 6] * a[:, 3] + 0.2400932400932401 * a[:, 6] * a[:, 5] + 0.2044426162073221 * a[:, 6] * a[:, 7] + 0.19036519036519037 * a[:, 7] * a[:, 4] + 0.2044426162073221 * a[:, 7] * a[:, 6] + 0.17813765182186234 * a[:, 7] * a[:, 8] + 0.16125051419169067 * a[:, 8] * a[:, 5] + 0.17813765182186234 * a[:, 8] * a[:, 7])
        volume_sum = volume_sum.at[:, 5].add(a[:, 0] * a[:, 0] + a[:, 0] * a[:, 2] + a[:, 0] * a[:, 4] + a[:, 1] * a[:, 1] + a[:, 1] * a[:, 3] + 0.45454545454545453 * a[:, 1] * a[:, 5] + a[:, 2] * a[:, 0] + a[:, 2] * a[:, 2] + 0.5454545454545454 * a[:, 2] * a[:, 4] + 0.3146853146853147 * a[:, 2] * a[:, 6] + a[:, 3] * a[:, 1] + 0.5670995670995671 * a[:, 3] * a[:, 3] + 0.3962703962703963 * a[:, 3] * a[:, 5] + 0.24475524475524477 * a[:, 3] * a[:, 7] + a[:, 4] * a[:, 0] + 0.5454545454545454 * a[:, 4] * a[:, 2] + 0.4172494172494173 * a[:, 4] * a[:, 4] + 0.3146853146853147 * a[:, 4] * a[:, 6] + 0.20156314273961332 * a[:, 4] * a[:, 8] + 0.45454545454545453 * a[:, 5] * a[:, 1] + 0.3962703962703963 * a[:, 5] * a[:, 3] + 0.3333333333333333 * a[:, 5] * a[:, 5] + 0.2620320855614973 * a[:, 5] * a[:, 7] + 0.3146853146853147 * a[:, 6] * a[:, 2] + 0.3146853146853147 * a[:, 6] * a[:, 4] + 0.27848621966269027 * a[:, 6] * a[:, 6] + 0.22490203295156855 * a[:, 6] * a[:, 8] + 0.24475524475524477 * a[:, 7] * a[:, 3] + 0.2620320855614973 * a[:, 7] * a[:, 5] + 0.23951590205460174 * a[:, 7] * a[:, 7] + 0.20156314273961332 * a[:, 8] * a[:, 4] + 0.22490203295156855 * a[:, 8] * a[:, 6] + 0.21028816384853535 * a[:, 8] * a[:, 8])
        volume_sum = volume_sum.at[:, 6].add(a[:, 0] * a[:, 1] + a[:, 0] * a[:, 3] + a[:, 0] * a[:, 5] + a[:, 1] * a[:, 0] + a[:, 1] * a[:, 2] + a[:, 1] * a[:, 4] + 0.46153846153846156 * a[:, 1] * a[:, 6] + a[:, 2] * a[:, 1] + a[:, 2] * a[:, 3] + 0.5594405594405595 * a[:, 2] * a[:, 5] + 0.3230769230769231 * a[:, 2] * a[:, 7] + a[:, 3] * a[:, 0] + a[:, 3] * a[:, 2] + 0.5920745920745921 * a[:, 3] * a[:, 4] + 0.4125874125874126 * a[:, 3] * a[:, 6] + 0.25339366515837103 * a[:, 3] * a[:, 8] + a[:, 4] * a[:, 1] + 0.5920745920745921 * a[:, 4] * a[:, 3] + 0.44522144522144524 * a[:, 4] * a[:, 5] + 0.3311394487865076 * a[:, 4] * a[:, 7] + a[:, 5] * a[:, 0] + 0.5594405594405595 * a[:, 5] * a[:, 2] + 0.44522144522144524 * a[:, 5] * a[:, 4] + 0.36075689016865486 * a[:, 5] * a[:, 6] + 0.2779449652514668 * a[:, 5] * a[:, 8] + 0.46153846153846156 * a[:, 6] * a[:, 1] + 0.4125874125874126 * a[:, 6] * a[:, 3] + 0.36075689016865486 * a[:, 6] * a[:, 5] + 0.30446643140141594 * a[:, 6] * a[:, 7] + 0.3230769230769231 * a[:, 7] * a[:, 2] + 0.3311394487865076 * a[:, 7] * a[:, 4] + 0.30446643140141594 * a[:, 7] * a[:, 6] + 0.2638723505596571 * a[:, 7] * a[:, 8] + 0.25339366515837103 * a[:, 8] * a[:, 3] + 0.2779449652514668 * a[:, 8] * a[:, 5] + 0.2638723505596571 * a[:, 8] * a[:, 7])
        volume_sum = volume_sum.at[:, 7].add(a[:, 0] * a[:, 0] + a[:, 0] * a[:, 2] + a[:, 0] * a[:, 4] + a[:, 0] * a[:, 6] + a[:, 1] * a[:, 1] + a[:, 1] * a[:, 3] + a[:, 1] * a[:, 5] + 0.4666666666666667 * a[:, 1] * a[:, 7] + a[:, 2] * a[:, 0] + a[:, 2] * a[:, 2] + a[:, 2] * a[:, 4] + 0.5692307692307692 * a[:, 2] * a[:, 6] + 0.32941176470588235 * a[:, 2] * a[:, 8] + a[:, 3] * a[:, 1] + a[:, 3] * a[:, 3] + 0.6083916083916084 * a[:, 3] * a[:, 5] + 0.4244343891402715 * a[:, 3] * a[:, 7] + a[:, 4] * a[:, 0] + a[:, 4] * a[:, 2] + 0.6192696192696193 * a[:, 4] * a[:, 4] + 0.4644179350061703 * a[:, 4] * a[:, 6] + 0.3434150988330555 * a[:, 4] * a[:, 8] + a[:, 5] * a[:, 1] + 0.6083916083916084 * a[:, 5] * a[:, 3] + 0.47593582887700536 * a[:, 5] * a[:, 5] + 0.38024204897269914 * a[:, 5] * a[:, 7] + a[:, 6] * a[:, 0] + 0.5692307692307692 * a[:, 6] * a[:, 2] + 0.4644179350061703 * a[:, 6] * a[:, 4] + 0.3910671371971682 * a[:, 6] * a[:, 6] + 0.3234103357942367 * a[:, 6] * a[:, 8] + 0.4666666666666667 * a[:, 7] * a[:, 1] + 0.4244343891402715 * a[:, 7] * a[:, 3] + 0.38024204897269914 * a[:, 7] * a[:, 5] + 0.3333333333333333 * a[:, 7] * a[:, 7] + 0.32941176470588235 * a[:, 8] * a[:, 2] + 0.3434150988330555 * a[:, 8] * a[:, 4] + 0.3234103357942367 * a[:, 8] * a[:, 6] + 0.2910527351232695 * a[:, 8] * a[:, 8])
        volume_sum = volume_sum.at[:, 8].add(a[:, 0] * a[:, 1] + a[:, 0] * a[:, 3] + a[:, 0] * a[:, 5] + a[:, 0] * a[:, 7] + a[:, 1] * a[:, 0] + a[:, 1] * a[:, 2] + a[:, 1] * a[:, 4] + a[:, 1] * a[:, 6] + 0.47058823529411764 * a[:, 1] * a[:, 8] + a[:, 2] * a[:, 1] + a[:, 2] * a[:, 3] + a[:, 2] * a[:, 5] + 0.5764705882352941 * a[:, 2] * a[:, 7] + a[:, 3] * a[:, 0] + a[:, 3] * a[:, 2] + a[:, 3] * a[:, 4] + 0.6199095022624435 * a[:, 3] * a[:, 6] + 0.43343653250773995 * a[:, 3] * a[:, 8] + a[:, 4] * a[:, 1] + a[:, 4] * a[:, 3] + 0.637186343068696 * a[:, 4] * a[:, 5] + 0.47844724934508215 * a[:, 4] * a[:, 7] + a[:, 5] * a[:, 0] + a[:, 5] * a[:, 2] + 0.637186343068696 * a[:, 5] * a[:, 4] + 0.49715300179696464 * a[:, 5] * a[:, 6] + 0.39485591807573234 * a[:, 5] * a[:, 8] + a[:, 6] * a[:, 1] + 0.6199095022624435 * a[:, 6] * a[:, 3] + 0.49715300179696464 * a[:, 6] * a[:, 5] + 0.4127173136461062 * a[:, 6] * a[:, 7] + a[:, 7] * a[:, 0] + 0.5764705882352941 * a[:, 7] * a[:, 2] + 0.47844724934508215 * a[:, 7] * a[:, 4] + 0.4127173136461062 * a[:, 7] * a[:, 6] + 0.3544736324383652 * a[:, 7] * a[:, 8] + 0.47058823529411764 * a[:, 8] * a[:, 1] + 0.43343653250773995 * a[:, 8] * a[:, 3] + 0.39485591807573234 * a[:, 8] * a[:, 5] + 0.3544736324383652 * a[:, 8] * a[:, 7])
        return volume_sum
    elif p == 10:
        volume_sum = np.zeros(a.shape)
        volume_sum = volume_sum.at[:, 1].add(a[:, 0] * a[:, 0] + 0.3333333333333333 * a[:, 1] * a[:, 1] + 0.2 * a[:, 2] * a[:, 2] + 0.14285714285714285 * a[:, 3] * a[:, 3] + 0.1111111111111111 * a[:, 4] * a[:, 4] + 0.09090909090909091 * a[:, 5] * a[:, 5] + 0.07692307692307693 * a[:, 6] * a[:, 6] + 0.06666666666666667 * a[:, 7] * a[:, 7] + 0.058823529411764705 * a[:, 8] * a[:, 8] + 0.05263157894736842 * a[:, 9] * a[:, 9])
        volume_sum = volume_sum.at[:, 2].add(a[:, 0] * a[:, 1] + a[:, 1] * a[:, 0] + 0.4 * a[:, 1] * a[:, 2] + 0.4 * a[:, 2] * a[:, 1] + 0.2571428571428571 * a[:, 2] * a[:, 3] + 0.2571428571428571 * a[:, 3] * a[:, 2] + 0.19047619047619047 * a[:, 3] * a[:, 4] + 0.19047619047619047 * a[:, 4] * a[:, 3] + 0.15151515151515152 * a[:, 4] * a[:, 5] + 0.15151515151515152 * a[:, 5] * a[:, 4] + 0.1258741258741259 * a[:, 5] * a[:, 6] + 0.1258741258741259 * a[:, 6] * a[:, 5] + 0.1076923076923077 * a[:, 6] * a[:, 7] + 0.1076923076923077 * a[:, 7] * a[:, 6] + 0.09411764705882353 * a[:, 7] * a[:, 8] + 0.09411764705882353 * a[:, 8] * a[:, 7] + 0.08359133126934984 * a[:, 8] * a[:, 9] + 0.08359133126934984 * a[:, 9] * a[:, 8])
        volume_sum = volume_sum.at[:, 3].add(a[:, 0] * a[:, 0] + a[:, 0] * a[:, 2] + a[:, 1] * a[:, 1] + 0.42857142857142855 * a[:, 1] * a[:, 3] + a[:, 2] * a[:, 0] + 0.4857142857142857 * a[:, 2] * a[:, 2] + 0.2857142857142857 * a[:, 2] * a[:, 4] + 0.42857142857142855 * a[:, 3] * a[:, 1] + 0.3333333333333333 * a[:, 3] * a[:, 3] + 0.21645021645021645 * a[:, 3] * a[:, 5] + 0.2857142857142857 * a[:, 4] * a[:, 2] + 0.2554112554112554 * a[:, 4] * a[:, 4] + 0.17482517482517482 * a[:, 4] * a[:, 6] + 0.21645021645021645 * a[:, 5] * a[:, 3] + 0.20745920745920746 * a[:, 5] * a[:, 5] + 0.14685314685314685 * a[:, 5] * a[:, 7] + 0.17482517482517482 * a[:, 6] * a[:, 4] + 0.17482517482517482 * a[:, 6] * a[:, 6] + 0.12669683257918551 * a[:, 6] * a[:, 8] + 0.14685314685314685 * a[:, 7] * a[:, 5] + 0.151131221719457 * a[:, 7] * a[:, 7] + 0.11145510835913312 * a[:, 7] * a[:, 9] + 0.12669683257918551 * a[:, 8] * a[:, 6] + 0.13312693498452013 * a[:, 8] * a[:, 8] + 0.11145510835913312 * a[:, 9] * a[:, 7] + 0.11897390535161433 * a[:, 9] * a[:, 9])
        volume_sum = volume_sum.at[:, 4].add(a[:, 0] * a[:, 1] + a[:, 0] * a[:, 3] + a[:, 1] * a[:, 0] + a[:, 1] * a[:, 2] + 0.4444444444444444 * a[:, 1] * a[:, 4] + a[:, 2] * a[:, 1] + 0.5238095238095238 * a[:, 2] * a[:, 3] + 0.30303030303030304 * a[:, 2] * a[:, 5] + a[:, 3] * a[:, 0] + 0.5238095238095238 * a[:, 3] * a[:, 2] + 0.3722943722943723 * a[:, 3] * a[:, 4] + 0.2331002331002331 * a[:, 3] * a[:, 6] + 0.4444444444444444 * a[:, 4] * a[:, 1] + 0.3722943722943723 * a[:, 4] * a[:, 3] + 0.2913752913752914 * a[:, 4] * a[:, 5] + 0.19036519036519037 * a[:, 4] * a[:, 7] + 0.30303030303030304 * a[:, 5] * a[:, 2] + 0.2913752913752914 * a[:, 5] * a[:, 4] + 0.2400932400932401 * a[:, 5] * a[:, 6] + 0.16125051419169067 * a[:, 5] * a[:, 8] + 0.2331002331002331 * a[:, 6] * a[:, 3] + 0.2400932400932401 * a[:, 6] * a[:, 5] + 0.2044426162073221 * a[:, 6] * a[:, 7] + 0.14003334127173137 * a[:, 6] * a[:, 9] + 0.19036519036519037 * a[:, 7] * a[:, 4] + 0.2044426162073221 * a[:, 7] * a[:, 6] + 0.17813765182186234 * a[:, 7] * a[:, 8] + 0.16125051419169067 * a[:, 8] * a[:, 5] + 0.17813765182186234 * a[:, 8] * a[:, 7] + 0.15789473684210525 * a[:, 8] * a[:, 9] + 0.14003334127173137 * a[:, 9] * a[:, 6] + 0.15789473684210525 * a[:, 9] * a[:, 8])
        volume_sum = volume_sum.at[:, 5].add(a[:, 0] * a[:, 0] + a[:, 0] * a[:, 2] + a[:, 0] * a[:, 4] + a[:, 1] * a[:, 1] + a[:, 1] * a[:, 3] + 0.45454545454545453 * a[:, 1] * a[:, 5] + a[:, 2] * a[:, 0] + a[:, 2] * a[:, 2] + 0.5454545454545454 * a[:, 2] * a[:, 4] + 0.3146853146853147 * a[:, 2] * a[:, 6] + a[:, 3] * a[:, 1] + 0.5670995670995671 * a[:, 3] * a[:, 3] + 0.3962703962703963 * a[:, 3] * a[:, 5] + 0.24475524475524477 * a[:, 3] * a[:, 7] + a[:, 4] * a[:, 0] + 0.5454545454545454 * a[:, 4] * a[:, 2] + 0.4172494172494173 * a[:, 4] * a[:, 4] + 0.3146853146853147 * a[:, 4] * a[:, 6] + 0.20156314273961332 * a[:, 4] * a[:, 8] + 0.45454545454545453 * a[:, 5] * a[:, 1] + 0.3962703962703963 * a[:, 5] * a[:, 3] + 0.3333333333333333 * a[:, 5] * a[:, 5] + 0.2620320855614973 * a[:, 5] * a[:, 7] + 0.17185910065167032 * a[:, 5] * a[:, 9] + 0.3146853146853147 * a[:, 6] * a[:, 2] + 0.3146853146853147 * a[:, 6] * a[:, 4] + 0.27848621966269027 * a[:, 6] * a[:, 6] + 0.22490203295156855 * a[:, 6] * a[:, 8] + 0.24475524475524477 * a[:, 7] * a[:, 3] + 0.2620320855614973 * a[:, 7] * a[:, 5] + 0.23951590205460174 * a[:, 7] * a[:, 7] + 0.19718980709692785 * a[:, 7] * a[:, 9] + 0.20156314273961332 * a[:, 8] * a[:, 4] + 0.22490203295156855 * a[:, 8] * a[:, 6] + 0.21028816384853535 * a[:, 8] * a[:, 8] + 0.17185910065167032 * a[:, 9] * a[:, 5] + 0.19718980709692785 * a[:, 9] * a[:, 7] + 0.18750841297617446 * a[:, 9] * a[:, 9])
        volume_sum = volume_sum.at[:, 6].add(a[:, 0] * a[:, 1] + a[:, 0] * a[:, 3] + a[:, 0] * a[:, 5] + a[:, 1] * a[:, 0] + a[:, 1] * a[:, 2] + a[:, 1] * a[:, 4] + 0.46153846153846156 * a[:, 1] * a[:, 6] + a[:, 2] * a[:, 1] + a[:, 2] * a[:, 3] + 0.5594405594405595 * a[:, 2] * a[:, 5] + 0.3230769230769231 * a[:, 2] * a[:, 7] + a[:, 3] * a[:, 0] + a[:, 3] * a[:, 2] + 0.5920745920745921 * a[:, 3] * a[:, 4] + 0.4125874125874126 * a[:, 3] * a[:, 6] + 0.25339366515837103 * a[:, 3] * a[:, 8] + a[:, 4] * a[:, 1] + 0.5920745920745921 * a[:, 4] * a[:, 3] + 0.44522144522144524 * a[:, 4] * a[:, 5] + 0.3311394487865076 * a[:, 4] * a[:, 7] + 0.21005001190759703 * a[:, 4] * a[:, 9] + a[:, 5] * a[:, 0] + 0.5594405594405595 * a[:, 5] * a[:, 2] + 0.44522144522144524 * a[:, 5] * a[:, 4] + 0.36075689016865486 * a[:, 5] * a[:, 6] + 0.2779449652514668 * a[:, 5] * a[:, 8] + 0.46153846153846156 * a[:, 6] * a[:, 1] + 0.4125874125874126 * a[:, 6] * a[:, 3] + 0.36075689016865486 * a[:, 6] * a[:, 5] + 0.30446643140141594 * a[:, 6] * a[:, 7] + 0.2400571564658252 * a[:, 6] * a[:, 9] + 0.3230769230769231 * a[:, 7] * a[:, 2] + 0.3311394487865076 * a[:, 7] * a[:, 4] + 0.30446643140141594 * a[:, 7] * a[:, 6] + 0.2638723505596571 * a[:, 7] * a[:, 8] + 0.25339366515837103 * a[:, 8] * a[:, 3] + 0.2779449652514668 * a[:, 8] * a[:, 5] + 0.2638723505596571 * a[:, 8] * a[:, 7] + 0.23306791472089627 * a[:, 8] * a[:, 9] + 0.21005001190759703 * a[:, 9] * a[:, 4] + 0.2400571564658252 * a[:, 9] * a[:, 6] + 0.23306791472089627 * a[:, 9] * a[:, 8])
        volume_sum = volume_sum.at[:, 7].add(a[:, 0] * a[:, 0] + a[:, 0] * a[:, 2] + a[:, 0] * a[:, 4] + a[:, 0] * a[:, 6] + a[:, 1] * a[:, 1] + a[:, 1] * a[:, 3] + a[:, 1] * a[:, 5] + 0.4666666666666667 * a[:, 1] * a[:, 7] + a[:, 2] * a[:, 0] + a[:, 2] * a[:, 2] + a[:, 2] * a[:, 4] + 0.5692307692307692 * a[:, 2] * a[:, 6] + 0.32941176470588235 * a[:, 2] * a[:, 8] + a[:, 3] * a[:, 1] + a[:, 3] * a[:, 3] + 0.6083916083916084 * a[:, 3] * a[:, 5] + 0.4244343891402715 * a[:, 3] * a[:, 7] + 0.26006191950464397 * a[:, 3] * a[:, 9] + a[:, 4] * a[:, 0] + a[:, 4] * a[:, 2] + 0.6192696192696193 * a[:, 4] * a[:, 4] + 0.4644179350061703 * a[:, 4] * a[:, 6] + 0.3434150988330555 * a[:, 4] * a[:, 8] + a[:, 5] * a[:, 1] + 0.6083916083916084 * a[:, 5] * a[:, 3] + 0.47593582887700536 * a[:, 5] * a[:, 5] + 0.38024204897269914 * a[:, 5] * a[:, 7] + 0.29006906406287214 * a[:, 5] * a[:, 9] + a[:, 6] * a[:, 0] + 0.5692307692307692 * a[:, 6] * a[:, 2] + 0.4644179350061703 * a[:, 6] * a[:, 4] + 0.3910671371971682 * a[:, 6] * a[:, 6] + 0.3234103357942367 * a[:, 6] * a[:, 8] + 0.4666666666666667 * a[:, 7] * a[:, 1] + 0.4244343891402715 * a[:, 7] * a[:, 3] + 0.38024204897269914 * a[:, 7] * a[:, 5] + 0.3333333333333333 * a[:, 7] * a[:, 7] + 0.2819926069353987 * a[:, 7] * a[:, 9] + 0.32941176470588235 * a[:, 8] * a[:, 2] + 0.3434150988330555 * a[:, 8] * a[:, 4] + 0.3234103357942367 * a[:, 8] * a[:, 6] + 0.2910527351232695 * a[:, 8] * a[:, 8] + 0.26006191950464397 * a[:, 9] * a[:, 3] + 0.29006906406287214 * a[:, 9] * a[:, 5] + 0.2819926069353987 * a[:, 9] * a[:, 7] + 0.2585812356979405 * a[:, 9] * a[:, 9])
        volume_sum = volume_sum.at[:, 8].add(a[:, 0] * a[:, 1] + a[:, 0] * a[:, 3] + a[:, 0] * a[:, 5] + a[:, 0] * a[:, 7] + a[:, 1] * a[:, 0] + a[:, 1] * a[:, 2] + a[:, 1] * a[:, 4] + a[:, 1] * a[:, 6] + 0.47058823529411764 * a[:, 1] * a[:, 8] + a[:, 2] * a[:, 1] + a[:, 2] * a[:, 3] + a[:, 2] * a[:, 5] + 0.5764705882352941 * a[:, 2] * a[:, 7] + 0.33436532507739936 * a[:, 2] * a[:, 9] + a[:, 3] * a[:, 0] + a[:, 3] * a[:, 2] + a[:, 3] * a[:, 4] + 0.6199095022624435 * a[:, 3] * a[:, 6] + 0.43343653250773995 * a[:, 3] * a[:, 8] + a[:, 4] * a[:, 1] + a[:, 4] * a[:, 3] + 0.637186343068696 * a[:, 4] * a[:, 5] + 0.47844724934508215 * a[:, 4] * a[:, 7] + 0.35294117647058826 * a[:, 4] * a[:, 9] + a[:, 5] * a[:, 0] + a[:, 5] * a[:, 2] + 0.637186343068696 * a[:, 5] * a[:, 4] + 0.49715300179696464 * a[:, 5] * a[:, 6] + 0.39485591807573234 * a[:, 5] * a[:, 8] + a[:, 6] * a[:, 1] + 0.6199095022624435 * a[:, 6] * a[:, 3] + 0.49715300179696464 * a[:, 6] * a[:, 5] + 0.4127173136461062 * a[:, 6] * a[:, 7] + 0.33790654089483 * a[:, 6] * a[:, 9] + a[:, 7] * a[:, 0] + 0.5764705882352941 * a[:, 7] * a[:, 2] + 0.47844724934508215 * a[:, 7] * a[:, 4] + 0.4127173136461062 * a[:, 7] * a[:, 6] + 0.3544736324383652 * a[:, 7] * a[:, 8] + 0.47058823529411764 * a[:, 8] * a[:, 1] + 0.43343653250773995 * a[:, 8] * a[:, 3] + 0.39485591807573234 * a[:, 8] * a[:, 5] + 0.3544736324383652 * a[:, 8] * a[:, 7] + 0.31134742226410017 * a[:, 8] * a[:, 9] + 0.33436532507739936 * a[:, 9] * a[:, 2] + 0.35294117647058826 * a[:, 9] * a[:, 4] + 0.33790654089483 * a[:, 9] * a[:, 6] + 0.31134742226410017 * a[:, 9] * a[:, 8])
        volume_sum = volume_sum.at[:, 9].add(a[:, 0] * a[:, 0] + a[:, 0] * a[:, 2] + a[:, 0] * a[:, 4] + a[:, 0] * a[:, 6] + a[:, 0] * a[:, 8] + a[:, 1] * a[:, 1] + a[:, 1] * a[:, 3] + a[:, 1] * a[:, 5] + a[:, 1] * a[:, 7] + 0.47368421052631576 * a[:, 1] * a[:, 9] + a[:, 2] * a[:, 0] + a[:, 2] * a[:, 2] + a[:, 2] * a[:, 4] + a[:, 2] * a[:, 6] + 0.5820433436532507 * a[:, 2] * a[:, 8] + a[:, 3] * a[:, 1] + a[:, 3] * a[:, 3] + a[:, 3] * a[:, 5] + 0.628482972136223 * a[:, 3] * a[:, 7] + 0.44051304732419283 * a[:, 3] * a[:, 9] + a[:, 4] * a[:, 0] + a[:, 4] * a[:, 2] + a[:, 4] * a[:, 4] + 0.6499166468206716 * a[:, 4] * a[:, 6] + 0.4891640866873065 * a[:, 4] * a[:, 8] + a[:, 5] * a[:, 1] + a[:, 5] * a[:, 3] + 0.6562817986966594 * a[:, 5] * a[:, 5] + 0.5127411288402001 * a[:, 5] * a[:, 7] + 0.40624579351191276 * a[:, 5] * a[:, 9] + a[:, 6] * a[:, 0] + a[:, 6] * a[:, 2] + 0.6499166468206716 * a[:, 6] * a[:, 4] + 0.5198856870683496 * a[:, 6] * a[:, 6] + 0.4290255443842737 * a[:, 6] * a[:, 8] + a[:, 7] * a[:, 1] + 0.628482972136223 * a[:, 7] * a[:, 3] + 0.5127411288402001 * a[:, 7] * a[:, 5] + 0.4360147861292026 * a[:, 7] * a[:, 7] + 0.3707093821510298 * a[:, 7] * a[:, 9] + a[:, 8] * a[:, 0] + 0.5820433436532507 * a[:, 8] * a[:, 2] + 0.4891640866873065 * a[:, 8] * a[:, 4] + 0.4290255443842737 * a[:, 8] * a[:, 6] + 0.3773051554717997 * a[:, 8] * a[:, 8] + 0.47368421052631576 * a[:, 9] * a[:, 1] + 0.44051304732419283 * a[:, 9] * a[:, 3] + 0.40624579351191276 * a[:, 9] * a[:, 5] + 0.3707093821510298 * a[:, 9] * a[:, 7] + 0.3333333333333333 * a[:, 9] * a[:, 9])
        return volume_sum
    else:
        raise NotImplementedError


def _diffusion_flux_term_DG_1D_burgers(a, t, p, dx, nu, bc='periodic',fL=None,fR=None):
    negonetok = (np.ones(p) * -1) ** np.arange(p)
    if bc == 'periodic':
        aL = a
        aR = np.roll(a, -1, axis=0)
        slope_right = recovery_slope(aL, aR, p) / dx
        slope_left = np.roll(slope_right, 1)
    elif bc == 'dirichlet':
        a = pad_dirichlet(a, t, fL, fR)
        slope = recovery_slope(a[:-1], a[1:], p) / dx
        slope_right = slope[1:]
        slope_left = slope[:-1]
    else:
        raise NotImplementedError
    return nu * (slope_right[:, None] - negonetok[None, :] * slope_left[:, None])

def _diffusion_volume_integral_DG_1D_burgers(a, t, p, dx, nu):
    coeff = -2 * nu / dx
    if p == 1:
        volume_sum = np.zeros(a.shape)
    elif p == 2:
        volume_sum = np.zeros(a.shape).at[:, 1].add(2.0 * a[:, 1])
    elif p == 3:
        volume_sum = np.zeros(a.shape).at[:, 1].add(2.0 * a[:, 1])
        volume_sum = volume_sum.at[:, 2].add(6.0 * a[:, 2])
    elif p == 4:
        volume_sum = np.zeros(a.shape).at[:, 1].add(2.0 * a[:, 1] + 2.0 * a[:, 3])
        volume_sum = volume_sum.at[:, 2].add(6.0 * a[:, 2])
        volume_sum = volume_sum.at[:, 3].add(2.0 * a[:, 1] + 12.0 * a[:, 3])
    elif p == 5:
        volume_sum = np.zeros(a.shape)
        volume_sum = volume_sum.at[:, 1].add(2.0 * a[:, 1] + 2.0 * a[:, 3])
        volume_sum = volume_sum.at[:, 2].add(6.0 * a[:, 2] + 6.0 * a[:, 4])
        volume_sum = volume_sum.at[:, 3].add(2.0 * a[:, 1] + 12.0 * a[:, 3])
        volume_sum = volume_sum.at[:, 4].add(6.0 * a[:, 2] + 20.0 * a[:, 4])
    elif p == 6:
        volume_sum = np.zeros(a.shape)
        volume_sum = volume_sum.at[:, 1].add(2.0 * a[:, 1] + 2.0 * a[:, 3] + 2.0 * a[:, 5])
        volume_sum = volume_sum.at[:, 2].add(6.0 * a[:, 2] + 6.0 * a[:, 4])
        volume_sum = volume_sum.at[:, 3].add(2.0 * a[:, 1] + 12.0 * a[:, 3] + 12.0 * a[:, 5])
        volume_sum = volume_sum.at[:, 4].add(6.0 * a[:, 2] + 20.0 * a[:, 4])
        volume_sum = volume_sum.at[:, 5].add(2.0 * a[:, 1] + 12.0 * a[:, 3] + 30.0 * a[:, 5])
    elif p == 7:
        volume_sum = np.zeros(a.shape)
        volume_sum = volume_sum.at[:, 1].add(2.0 * a[:, 1] + 2.0 * a[:, 3] + 2.0 * a[:, 5])
        volume_sum = volume_sum.at[:, 2].add(6.0 * a[:, 2] + 6.0 * a[:, 4] + 6.0 * a[:, 6])
        volume_sum = volume_sum.at[:, 3].add(2.0 * a[:, 1] + 12.0 * a[:, 3] + 12.0 * a[:, 5])
        volume_sum = volume_sum.at[:, 4].add(6.0 * a[:, 2] + 20.0 * a[:, 4] + 20.0 * a[:, 6])
        volume_sum = volume_sum.at[:, 5].add(2.0 * a[:, 1] + 12.0 * a[:, 3] + 30.0 * a[:, 5])
        volume_sum = volume_sum.at[:, 6].add(6.0 * a[:, 2] + 20.0 * a[:, 4] + 42.0 * a[:, 6])
    elif p == 8:
        volume_sum = np.zeros(a.shape)
        volume_sum = volume_sum.at[:, 1].add(2.0 * a[:, 1] + 2.0 * a[:, 3] + 2.0 * a[:, 5] + 2.0 * a[:, 7])
        volume_sum = volume_sum.at[:, 2].add(6.0 * a[:, 2] + 6.0 * a[:, 4] + 6.0 * a[:, 6])
        volume_sum = volume_sum.at[:, 3].add(2.0 * a[:, 1] + 12.0 * a[:, 3] + 12.0 * a[:, 5] + 12.0 * a[:, 7])
        volume_sum = volume_sum.at[:, 4].add(6.0 * a[:, 2] + 20.0 * a[:, 4] + 20.0 * a[:, 6])
        volume_sum = volume_sum.at[:, 5].add(2.0 * a[:, 1] + 12.0 * a[:, 3] + 30.0 * a[:, 5] + 30.0 * a[:, 7])
        volume_sum = volume_sum.at[:, 6].add(6.0 * a[:, 2] + 20.0 * a[:, 4] + 42.0 * a[:, 6])
        volume_sum = volume_sum.at[:, 7].add(2.0 * a[:, 1] + 12.0 * a[:, 3] + 30.0 * a[:, 5] + 56.0 * a[:, 7])
    elif p == 9:
        volume_sum = np.zeros(a.shape)
        volume_sum = volume_sum.at[:, 1].add(2.0 * a[:, 1] + 2.0 * a[:, 3] + 2.0 * a[:, 5] + 2.0 * a[:, 7])
        volume_sum = volume_sum.at[:, 2].add(6.0 * a[:, 2] + 6.0 * a[:, 4] + 6.0 * a[:, 6] + 6.0 * a[:, 8])
        volume_sum = volume_sum.at[:, 3].add(2.0 * a[:, 1] + 12.0 * a[:, 3] + 12.0 * a[:, 5] + 12.0 * a[:, 7])
        volume_sum = volume_sum.at[:, 4].add(6.0 * a[:, 2] + 20.0 * a[:, 4] + 20.0 * a[:, 6] + 20.0 * a[:, 8])
        volume_sum = volume_sum.at[:, 5].add(2.0 * a[:, 1] + 12.0 * a[:, 3] + 30.0 * a[:, 5] + 30.0 * a[:, 7])
        volume_sum = volume_sum.at[:, 6].add(6.0 * a[:, 2] + 20.0 * a[:, 4] + 42.0 * a[:, 6] + 42.0 * a[:, 8])
        volume_sum = volume_sum.at[:, 7].add(2.0 * a[:, 1] + 12.0 * a[:, 3] + 30.0 * a[:, 5] + 56.0 * a[:, 7])
        volume_sum = volume_sum.at[:, 8].add(6.0 * a[:, 2] + 20.0 * a[:, 4] + 42.0 * a[:, 6] + 72.0 * a[:, 8])
    elif p == 10:
        volume_sum = np.zeros(a.shape)
        volume_sum = volume_sum.at[:, 1].add(2.0 * a[:, 1] + 2.0 * a[:, 3] + 2.0 * a[:, 5] + 2.0 * a[:, 7] + 2.0 * a[:, 9])
        volume_sum = volume_sum.at[:, 2].add(6.0 * a[:, 2] + 6.0 * a[:, 4] + 6.0 * a[:, 6] + 6.0 * a[:, 8])
        volume_sum = volume_sum.at[:, 3].add(2.0 * a[:, 1] + 12.0 * a[:, 3] + 12.0 * a[:, 5] + 12.0 * a[:, 7] + 12.0 * a[:, 9])
        volume_sum = volume_sum.at[:, 4].add(6.0 * a[:, 2] + 20.0 * a[:, 4] + 20.0 * a[:, 6] + 20.0 * a[:, 8])
        volume_sum = volume_sum.at[:, 5].add(2.0 * a[:, 1] + 12.0 * a[:, 3] + 30.0 * a[:, 5] + 30.0 * a[:, 7] + 30.0 * a[:, 9])
        volume_sum = volume_sum.at[:, 6].add(6.0 * a[:, 2] + 20.0 * a[:, 4] + 42.0 * a[:, 6] + 42.0 * a[:, 8])
        volume_sum = volume_sum.at[:, 7].add(2.0 * a[:, 1] + 12.0 * a[:, 3] + 30.0 * a[:, 5] + 56.0 * a[:, 7] + 56.0 * a[:, 9])
        volume_sum = volume_sum.at[:, 8].add(6.0 * a[:, 2] + 20.0 * a[:, 4] + 42.0 * a[:, 6] + 72.0 * a[:, 8])
        volume_sum = volume_sum.at[:, 9].add(2.0 * a[:, 1] + 12.0 * a[:, 3] + 30.0 * a[:, 5] + 56.0 * a[:, 7] + 90.0 * a[:, 9])
    else:
        raise NotImplementedError
    return coeff * volume_sum


def time_derivative_DG_1D_burgers(a, t, flux, dx, leg_poly, nu=0.0, bc = 'periodic', fL = None, fR = None):
    """
    Compute da_j^m/dt given the matrix a_j^m which represents the solution,
    for a given flux. The time-derivative is given by a Galerkin minimization
    of the residual squared, with Legendre polynomial basis functions.
    For the 1D burgers equation
            df/dt + c df/dx = 0
    with f_j = \sum a_j^m \phi_m, the time derivatives equal

    da_j^m/dt = ...

    Inputs
    a: (nx, p) array of coefficients
    t: time, scalar, not used here
    c: speed (scalar)
    flux: Enum, decides which flux will be used for the boundary

    Outputs
    da_j^m/dt: (nx, p) array of time derivatives
    """
    nx = a.shape[0]
    p = a.shape[1]
    twokplusone = 2 * np.arange(0, p) + 1
    flux_term = _flux_term_DG_1D_burgers(a, t, p, flux,bc=bc,fL=fL,fR=fR)
    volume_integral = _volume_integral_DG_1D_burgers(a, t, p)
    dif_flux_term = _diffusion_flux_term_DG_1D_burgers(a, t, p, dx, nu,bc=bc,fL=fL,fR=fR)
    dif_volume_integral = _diffusion_volume_integral_DG_1D_burgers(a, t, p, dx, nu)
    return (twokplusone[None, :] / dx) * (
        flux_term + volume_integral + dif_flux_term + dif_volume_integral
    )
